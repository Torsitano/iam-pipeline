/* tslint:disable */
/**
 * This file was automatically generated by json-schema-to-typescript.
 * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
 * and run json-schema-to-typescript to regenerate this file.
 */

export type Protocol = string;
export type IpAddress = string;
export type ResourceArn = string;
export type Port = number;

/**
 * Resource schema for AWS::EC2::NetworkInsightsAnalysis
 */
export interface AwsEc2Networkinsightsanalysis {
  NetworkInsightsAnalysisId?: string;
  NetworkInsightsAnalysisArn?: string;
  StartDate?: string;
  Status?: "running" | "failed" | "succeeded";
  StatusMessage?: string;
  NetworkPathFound?: boolean;
  ForwardPathComponents?: PathComponent[];
  ReturnPathComponents?: PathComponent[];
  Explanations?: Explanation[];
  AlternatePathHints?: AlternatePathHint[];
  NetworkInsightsPathId: string;
  FilterInArns?: ResourceArn[];
  Tags?: Tag[];
}
export interface PathComponent {
  SequenceNumber?: number;
  AclRule?: AnalysisAclRule;
  Component?: AnalysisComponent;
  DestinationVpc?: AnalysisComponent;
  OutboundHeader?: AnalysisPacketHeader;
  InboundHeader?: AnalysisPacketHeader;
  RouteTableRoute?: AnalysisRouteTableRoute;
  SecurityGroupRule?: AnalysisSecurityGroupRule;
  SourceVpc?: AnalysisComponent;
  Subnet?: AnalysisComponent;
  Vpc?: AnalysisComponent;
}
export interface AnalysisAclRule {
  Cidr?: string;
  Egress?: boolean;
  PortRange?: PortRange;
  Protocol?: Protocol;
  RuleAction?: string;
  RuleNumber?: number;
}
export interface PortRange {
  From?: number;
  To?: number;
}
export interface AnalysisComponent {
  Id?: string;
  Arn?: string;
}
export interface AnalysisPacketHeader {
  DestinationAddresses?: IpAddress[];
  DestinationPortRanges?: PortRange[];
  Protocol?: Protocol;
  SourceAddresses?: IpAddress[];
  SourcePortRanges?: PortRange[];
}
export interface AnalysisRouteTableRoute {
  destinationCidr?: string;
  destinationPrefixListId?: string;
  egressOnlyInternetGatewayId?: string;
  gatewayId?: string;
  instanceId?: string;
  NatGatewayId?: string;
  NetworkInterfaceId?: string;
  Origin?: string;
  TransitGatewayId?: string;
  VpcPeeringConnectionId?: string;
}
export interface AnalysisSecurityGroupRule {
  Cidr?: string;
  Direction?: string;
  SecurityGroupId?: string;
  PortRange?: PortRange;
  PrefixListId?: string;
  Protocol?: Protocol;
}
export interface Explanation {
  Acl?: AnalysisComponent;
  AclRule?: AnalysisAclRule;
  Address?: IpAddress;
  Addresses?: IpAddress[];
  AttachedTo?: AnalysisComponent;
  AvailabilityZones?: string[];
  Cidrs?: string[];
  Component?: AnalysisComponent;
  CustomerGateway?: AnalysisComponent;
  Destination?: AnalysisComponent;
  DestinationVpc?: AnalysisComponent;
  Direction?: string;
  ExplanationCode?: string;
  IngressRouteTable?: AnalysisComponent;
  InternetGateway?: AnalysisComponent;
  LoadBalancerArn?: ResourceArn;
  ClassicLoadBalancerListener?: AnalysisLoadBalancerListener;
  LoadBalancerListenerPort?: Port;
  LoadBalancerTarget?: AnalysisLoadBalancerTarget;
  LoadBalancerTargetGroup?: AnalysisComponent;
  LoadBalancerTargetGroups?: AnalysisComponent[];
  LoadBalancerTargetPort?: Port;
  ElasticLoadBalancerListener?: AnalysisComponent;
  MissingComponent?: string;
  NatGateway?: AnalysisComponent;
  NetworkInterface?: AnalysisComponent;
  PacketField?: string;
  VpcPeeringConnection?: AnalysisComponent;
  Port?: Port;
  PortRanges?: PortRange[];
  PrefixList?: AnalysisComponent;
  Protocols?: Protocol[];
  RouteTableRoute?: AnalysisRouteTableRoute;
  RouteTable?: AnalysisComponent;
  SecurityGroup?: AnalysisComponent;
  SecurityGroupRule?: AnalysisSecurityGroupRule;
  SecurityGroups?: AnalysisComponent[];
  SourceVpc?: AnalysisComponent;
  State?: string;
  Subnet?: AnalysisComponent;
  SubnetRouteTable?: AnalysisComponent;
  Vpc?: AnalysisComponent;
  vpcEndpoint?: AnalysisComponent;
  VpnConnection?: AnalysisComponent;
  VpnGateway?: AnalysisComponent;
}
export interface AnalysisLoadBalancerListener {
  InstancePort?: Port;
  LoadBalancerPort?: Port;
}
export interface AnalysisLoadBalancerTarget {
  Address?: IpAddress;
  AvailabilityZone?: string;
  Instance?: AnalysisComponent;
  Port?: Port;
}
export interface AlternatePathHint {
  ComponentId?: string;
  ComponentArn?: string;
}
export interface Tag {
  Key: string;
  Value?: string;
}
